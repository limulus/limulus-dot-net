<pho-picture webc:root>
  <script webc:type="js">
    const { photos } = this.$data
    const { id, renditions } = webc.attributes
    const wantedRenditions = renditions.split(/\s*,\s*/)
    const photo = this.getPhoto(id)

    /** @returns {Array<{ name: string, format: string, width: number, url: string }>} */
    const getRenditions = (wantedFormat) => {
      return photo.renditions
        .filter(
          ({ name, format: f }) => wantedRenditions.includes(name) && f === wantedFormat
        )
        .sort(({ width: a }, { width: b }) => b - a)
    }

    const srcset = ({ format: wantedFormat }) => {
      return getRenditions(wantedFormat)
        .map(({ url, width }) => `${url} ${width}w`)
        .join(', ')
    }

    const src = () => {
      return photo.renditions.find(({ name, format }) => name === 'md' && format === 'jpeg')
        .url
    }

    const largest = getRenditions('jpeg').shift()

    const html = /* HTML */ `
      <blur-hash
        blurhash="${photo.blurhash}"
        width="${largest.width}"
        height="${largest.height}"
      >
        <picture>
          <source
            srcset="${srcset({ format: 'avif' })}"
            type="image/avif"
            width="${largest.width}"
            height="${largest.height}"
          />
          <source
            srcset="${srcset({ format: 'jpeg' })}"
            type="image/jpeg"
            width="${largest.width}"
            height="${largest.height}"
          />
          <img-fallback
            src="${largest.url}"
            srcset="${srcset({ format: 'jpeg' })}"
            alt="${alt ?? photo.description}"
            width="${largest.width}"
            height="${largest.height}"
            ${webc.renderAttributes(webc.attributes)}
          />
        </picture>
      </blur-hash>
    `

    html
  </script>
</pho-picture>

<style>
  pho-picture img {
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
  }
</style>
